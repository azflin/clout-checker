{"version":3,"sources":["CloutChecker.js","reportWebVitals.js","index.js"],"names":["DATE_OPTIONS","year","month","day","hour","minute","hour12","TweetForm","props","state","tweetId","status","handleChange","bind","onTweetLoad","event","tweetIdOrUrl","target","value","this","setState","includes","split","err","updateDate","isNaN","fetch","then","response","json","data","created_at","catch","error","console","log","Spinner","animation","Alert","variant","Form","Group","controlId","Label","Control","onChange","placeholder","tweedId","React","Component","EmbeddedTweet","renderError","_err","onLoad","CoinForm","coinList","selectedCoin","filterCoins","promiseOptions","map","x","id","label","symbol","toUpperCase","name","e","onCoinChange","inputValue","filter","i","toLowerCase","Promise","resolve","setTimeout","onSubmit","handleSubmit","cacheOptions","defaultOptions","loadOptions","Button","type","disabled","date","CloutChecker","handleCoinChange","getCoinReturn","coin","coinReturnStats","Date","getTime","preventDefault","coinReturn","className","peakRow","Intl","DateTimeFormat","format","peak","timeStamp","price","toFixed","style","color","start","troughRow","trough","peakAndTroughRows","Card","Header","as","Body","Table","bordered","hover","striped","end","Container","Row","Col","md","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b720dac.chunk.js","sourcesContent":["import React from 'react';\nimport { Tweet } from 'react-twitter-widgets';\nimport AsyncSelect from 'react-select/async';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Form, Button, Container, Col, Row, Card, Table, Spinner, Alert, Overlay, Tooltip } from 'react-bootstrap'\n\nconst DATE_OPTIONS = {\n  year: 'numeric', month: 'numeric', day: 'numeric',\n  hour: 'numeric', minute: 'numeric',\n  hour12: false\n};\n\nclass TweetForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {tweetId: '', status: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onTweetLoad = this.onTweetLoad.bind(this);\n  }\n\n  handleChange(event) {\n    let tweetIdOrUrl = event.target.value;\n    this.setState({status: \"loading\"});\n    if (tweetIdOrUrl.includes(\"twitter.com\") && tweetIdOrUrl.includes(\"status\")) {\n      try {\n        tweetIdOrUrl = tweetIdOrUrl.split(\"status/\")[1].split(\"?\")[0];\n        this.setState({tweetId: tweetIdOrUrl});\n      }\n      catch(err) {\n        this.setState({tweetId: '', status: 'invalidInput'});\n        this.props.updateDate('');\n      }\n    } else if (tweetIdOrUrl == '') {\n      this.setState({tweetId: '', status: null});\n      this.props.updateDate('');\n    } else if (!isNaN(tweetIdOrUrl)) {\n      this.setState({tweetId: tweetIdOrUrl});\n    } else {\n      this.setState({tweetId: '', status: 'invalidInput'});\n      this.props.updateDate('');\n    }\n  }\n\n  onTweetLoad() {\n    fetch(`/tweet/${this.state.tweetId}`)\n      .then(response => response.json())\n      .then(json => {\n        this.setState({status: null});\n        this.props.updateDate(json.data.created_at);\n      })\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    let status = null;\n    if (this.state.status === 'loading') {\n      status = <div><Spinner animation=\"border\"></Spinner></div>;\n    } else if (this.state.status === 'invalidInput') {\n      status = <Alert variant=\"danger\">Invalid input.</Alert>\n    }\n    return (\n      <div>\n        <Form>\n          <Form.Group controlId=\"formTweet\">\n            <Form.Label>Tweet ID or URL</Form.Label>\n            <Form.Control\n              onChange={this.handleChange}\n              placeholder=\"Paste paste tweet ID or URL here\">\n            </Form.Control>\n          </Form.Group>\n        </Form>\n        {status}\n        { this.state.tweetId &&\n          <EmbeddedTweet tweedId={this.state.tweetId} onTweetLoad={this.onTweetLoad}>\n          </EmbeddedTweet>}\n      </div>\n    );\n  }\n}\n\nclass EmbeddedTweet extends React.Component {\n\n  render() {\n    return (\n      <Tweet\n        tweetId={this.props.tweedId}\n        renderError={(_err) => <Alert variant=\"danger\">Invalid tweet ID provided.</Alert>}\n        onLoad={this.props.onTweetLoad}>\n      </Tweet>\n    );\n  } \n}\n\nclass CoinForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {coinList: [], selectedCoin: ''};\n    this.filterCoins = this.filterCoins.bind(this);\n    this.promiseOptions = this.promiseOptions.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=1&sparkline=false\")\n      .then(response => response.json())\n      .then(json => {\n        let coinList = json.map(x => ({ value: x.id, label: `${x.symbol.toUpperCase()} (${x.name})`}));\n        this.setState({coinList});\n      })\n      .catch(error => console.log(error));\n  }\n\n  handleChange(e) {\n    this.props.onCoinChange(e.value);\n    this.setState({selectedCoin: e.value});\n  }\n\n  filterCoins(inputValue) {\n    return this.state.coinList.filter(i => i.label.toLowerCase().includes(inputValue.toLowerCase()));\n  }\n\n  promiseOptions(inputValue) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(this.filterCoins(inputValue));\n      }, 250);\n    });\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.props.handleSubmit}>\n        <Form.Group controlId=\"formCoin\">\n          <Form.Label>Crypto</Form.Label>\n          <AsyncSelect\n            cacheOptions\n            defaultOptions={this.state.coinList}\n            placeholder='Start typing to search...' \n            loadOptions={this.promiseOptions}\n            onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\"\n                disabled={!this.props.date || !this.state.selectedCoin}>Submit</Button>\n    </Form>\n    );\n  }\n}\n\nexport class CloutChecker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCoinChange = this.handleCoinChange.bind(this);\n    this.updateDate = this.updateDate.bind(this);\n    this.getCoinReturn = this.getCoinReturn.bind(this);\n    this.state = {\n      date: '',\n      coin: '',\n      coinReturnStats: null\n    };\n  }\n\n  handleCoinChange(coin) {\n    this.setState({coin});\n  }\n\n  updateDate(date) {\n    this.setState({date: (new Date(date)).getTime()});\n    this.setState({coinReturnStats: null});\n  }\n\n  getCoinReturn(e) {\n    e.preventDefault();\n    this.setState({coinReturnStats: 'loading'});\n    fetch(`/coinPerformance/${this.state.coin}/${this.state.date}`)\n      .then(response => response.json())\n      .then(json => {\n        this.setState({\n          coinReturnStats: json\n        })\n      })\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    let coinReturn = <div></div>;\n    if (this.state.coinReturnStats === 'loading') {\n      coinReturn = <div><Spinner animation=\"border\" className=\"mt-3\"></Spinner></div>\n    } else if (this.state.coinReturnStats != null) {\n      let peakRow = <tr key=\"peak\">\n        <td>Peak Since Tweet</td>\n        <td>\n          {new Intl.DateTimeFormat('en-US', DATE_OPTIONS).format(\n            new Date(this.state.coinReturnStats.peak.timeStamp))}\n        </td>\n        <td>{this.state.coinReturnStats.peak.price > 1 ? this.state.coinReturnStats.peak.price.toFixed(2): this.state.coinReturnStats.peak.price}</td>\n        <td>\n          <b style={{color: (this.state.coinReturnStats.peak.price/this.state.coinReturnStats.start.price-1)>0 ? \"green\" : \"red\"}}>\n            {((this.state.coinReturnStats.peak.price/this.state.coinReturnStats.start.price-1)*100).toFixed(1)}%\n          </b>\n        </td>\n      </tr>\n      let troughRow = <tr key=\"trough\">\n        <td>Trough Since Tweet</td>\n        <td>\n          {new Intl.DateTimeFormat('en-US', DATE_OPTIONS).format(\n            new Date(this.state.coinReturnStats.trough.timeStamp))}\n        </td>\n        <td>{this.state.coinReturnStats.trough.price > 1 ? this.state.coinReturnStats.trough.price.toFixed(2): this.state.coinReturnStats.trough.price}</td>\n        <td>\n          <b style={{color: (this.state.coinReturnStats.trough.price/this.state.coinReturnStats.start.price-1)>0 ? \"green\" : \"red\"}}>\n            {((this.state.coinReturnStats.trough.price/this.state.coinReturnStats.start.price-1)*100).toFixed(1)}%\n          </b>\n        </td>\n      </tr>\n      let peakAndTroughRows = this.state.coinReturnStats.peak.timeStamp > this.state.coinReturnStats.trough.timeStamp ?\n        [troughRow, peakRow] : [peakRow, troughRow]\n      coinReturn = <Card className=\"mt-3\">\n        <Card.Header as =\"h5\">Return Stats</Card.Header>\n        <Card.Body>\n          <Table bordered hover striped>\n            <thead>\n              <tr>\n                <th></th>\n                <th>Date</th>\n                <th>Price</th>\n                <th>%</th>\n              </tr>\n              </thead>\n            <tbody>\n              <tr key=\"atTweet\">\n                <td>At Tweet</td>\n                <td>\n                  {new Intl.DateTimeFormat('en-US', DATE_OPTIONS).format(\n                    new Date(this.state.coinReturnStats.start.timeStamp))}\n                </td>\n                <td>{this.state.coinReturnStats.start.price > 1 ? this.state.coinReturnStats.start.price.toFixed(2): this.state.coinReturnStats.start.price}</td>\n                <td>-</td>\n              </tr>\n              {peakAndTroughRows}\n              <tr key=\"now\">\n                <td>Now(ish)</td>\n                <td>\n                  {new Intl.DateTimeFormat('en-US', DATE_OPTIONS).format(\n                    new Date(this.state.coinReturnStats.end.timeStamp))}\n                </td>\n                <td>{this.state.coinReturnStats.end.price > 1 ? this.state.coinReturnStats.end.price.toFixed(2): this.state.coinReturnStats.end.price}</td>\n                <td>\n                  <b style={{color: (this.state.coinReturnStats.end.price/this.state.coinReturnStats.start.price-1)>0 ? \"green\" : \"red\"}}>\n                    {((this.state.coinReturnStats.end.price/this.state.coinReturnStats.start.price-1)*100).toFixed(1)}%\n                  </b>\n                </td>\n              </tr>\n            </tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    }\n    return (\n      <Container>\n        <h1 className=\"mt-3\">Clout Checker</h1>\n        <Row>\n          <Col md>\n            <TweetForm updateDate={this.updateDate}></TweetForm>\n          </Col>\n          <Col md>\n            <CoinForm\n              onCoinChange={this.handleCoinChange}\n              handleSubmit={this.getCoinReturn}\n              date={this.state.date}>\n            </CoinForm>\n            {coinReturn}\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <br></br>\n            <p>* Pricing data is sourced from <a href=\"https://www.coingecko.com/en\">CoinGecko</a>. The top 250 coins by market cap are available in this app.</p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CloutChecker } from './CloutChecker';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CloutChecker />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}